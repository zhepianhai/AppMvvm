package com.gw.zph.base.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gw.zph.base.db.AddressBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS_BEAN".
*/
public class AddressBeanDao extends AbstractDao<AddressBean, String> {

    public static final String TABLENAME = "ADDRESS_BEAN";

    /**
     * Properties of entity AddressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AdCode = new Property(0, String.class, "adCode", true, "AD_CODE");
        public final static Property AdGrad = new Property(1, String.class, "adGrad", false, "AD_GRAD");
        public final static Property AdName = new Property(2, String.class, "adName", false, "AD_NAME");
        public final static Property ProvinceAdCode = new Property(3, String.class, "provinceAdCode", false, "IS_POVERYT");
        public final static Property UpCode = new Property(4, String.class, "upCode", false, "AD_FCODE");
        public final static Property WholeName = new Property(5, String.class, "wholeName", false, "AD_FULL_NAME");
    }


    public AddressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddressBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAdCode());
        stmt.bindString(2, entity.getAdGrad());
        stmt.bindString(3, entity.getAdName());
 
        String provinceAdCode = entity.getProvinceAdCode();
        if (provinceAdCode != null) {
            stmt.bindString(4, provinceAdCode);
        }
 
        String upCode = entity.getUpCode();
        if (upCode != null) {
            stmt.bindString(5, upCode);
        }
 
        String wholeName = entity.getWholeName();
        if (wholeName != null) {
            stmt.bindString(6, wholeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddressBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAdCode());
        stmt.bindString(2, entity.getAdGrad());
        stmt.bindString(3, entity.getAdName());
 
        String provinceAdCode = entity.getProvinceAdCode();
        if (provinceAdCode != null) {
            stmt.bindString(4, provinceAdCode);
        }
 
        String upCode = entity.getUpCode();
        if (upCode != null) {
            stmt.bindString(5, upCode);
        }
 
        String wholeName = entity.getWholeName();
        if (wholeName != null) {
            stmt.bindString(6, wholeName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public AddressBean readEntity(Cursor cursor, int offset) {
        AddressBean entity = new AddressBean( //
            cursor.getString(offset + 0), // adCode
            cursor.getString(offset + 1), // adGrad
            cursor.getString(offset + 2), // adName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // provinceAdCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // upCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // wholeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddressBean entity, int offset) {
        entity.setAdCode(cursor.getString(offset + 0));
        entity.setAdGrad(cursor.getString(offset + 1));
        entity.setAdName(cursor.getString(offset + 2));
        entity.setProvinceAdCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWholeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AddressBean entity, long rowId) {
        return entity.getAdCode();
    }
    
    @Override
    public String getKey(AddressBean entity) {
        if(entity != null) {
            return entity.getAdCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddressBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
